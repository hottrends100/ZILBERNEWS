"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/english-news";
exports.ids = ["pages/api/english-news"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fenglish-news&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fenglish-news.js&middlewareConfigBase64=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fenglish-news&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fenglish-news.js&middlewareConfigBase64=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_english_news_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/english-news.js */ \"(api)/./pages/api/english-news.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_english_news_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_english_news_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/english-news\",\n        pathname: \"/api/english-news\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_english_news_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmVuZ2xpc2gtbmV3cyZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTJGYXBpJTJGZW5nbGlzaC1uZXdzLmpzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQ3dEO0FBQ3hEO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyx1REFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsdURBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3VwZXItbmV3cy8/ZGMwZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXMvYXBpL2VuZ2xpc2gtbmV3cy5qc1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2VuZ2xpc2gtbmV3c1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2VuZ2xpc2gtbmV3c1wiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fenglish-news&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fenglish-news.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/english-news.js":
/*!***********************************!*\
  !*** ./pages/api/english-news.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n\n\n// NewsAPI configuration\nconst NEWSAPI_KEY = process.env.NEWSAPI_KEY;\nconst NEWSAPI_BASE_URL = \"https://newsapi.org/v2\";\n// Cache configuration\nconst CACHE_DURATION = 15 * 60 * 1000; // 15 minutes in milliseconds\nconst CACHE_FILE = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"news-cache.json\");\n// Background generation state\nlet backgroundInterval = null;\nlet isGenerating = false;\n// Check if cache exists (we'll always serve from cache if it exists)\nfunction cacheExists() {\n    try {\n        return fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(CACHE_FILE);\n    } catch (error) {\n        console.error(\"❌ Error checking cache:\", error);\n        return false;\n    }\n}\n// Check if cache needs refresh (for background generation)\nfunction cacheNeedsRefresh() {\n    try {\n        if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(CACHE_FILE)) {\n            return true;\n        }\n        const cacheData = JSON.parse(fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(CACHE_FILE, \"utf8\"));\n        const now = Date.now();\n        const cacheAge = now - cacheData.timestamp;\n        return cacheAge >= CACHE_DURATION;\n    } catch (error) {\n        console.error(\"❌ Error reading cache for refresh check:\", error);\n        return true;\n    }\n}\n// Load cached news with self-recovery\nfunction loadCachedNews() {\n    try {\n        const cacheData = JSON.parse(fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(CACHE_FILE, \"utf8\"));\n        // Validate cache structure\n        if (!cacheData.articles || !Array.isArray(cacheData.articles) || cacheData.articles.length === 0) {\n            throw new Error(\"Invalid cache structure or empty articles\");\n        }\n        console.log(`✅ Loaded ${cacheData.articles.length} cached articles`);\n        return cacheData.articles;\n    } catch (error) {\n        console.error(\"❌ Error loading cached news:\", error);\n        // Self-recovery: delete corrupt cache file\n        try {\n            if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(CACHE_FILE)) {\n                fs__WEBPACK_IMPORTED_MODULE_0___default().unlinkSync(CACHE_FILE);\n                console.log(\"\\uD83D\\uDDD1️ Deleted corrupt cache file for self-recovery\");\n            }\n        } catch (deleteError) {\n            console.error(\"❌ Failed to delete corrupt cache:\", deleteError);\n        }\n        return null;\n    }\n}\n// Save news to cache\nfunction saveToCache(articles) {\n    try {\n        const cacheData = {\n            articles: articles,\n            timestamp: Date.now(),\n            generatedAt: new Date().toISOString()\n        };\n        fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(CACHE_FILE, JSON.stringify(cacheData, null, 2));\n        console.log(`💾 Saved ${articles.length} articles to cache`);\n    } catch (error) {\n        console.error(\"❌ Error saving to cache:\", error);\n    }\n}\n// Background news generation\nasync function generateNewsInBackground() {\n    if (isGenerating) {\n        console.log(\"\\uD83D\\uDD04 News generation already in progress, skipping...\");\n        return;\n    }\n    if (!cacheNeedsRefresh()) {\n        console.log(\"\\uD83D\\uDCC1 Cache still fresh, skipping background generation\");\n        return;\n    }\n    isGenerating = true;\n    console.log(\"\\uD83D\\uDD04 Background: Generating fresh news...\");\n    try {\n        const articles = await fetchRealNews();\n        saveToCache(articles);\n        console.log(\"✅ Background: News updated successfully\");\n    } catch (error) {\n        console.error(\"❌ Background generation failed:\", error);\n    } finally{\n        isGenerating = false;\n    }\n}\n// Start background news generation\nfunction startBackgroundGeneration() {\n    if (backgroundInterval) {\n        return; // Already running\n    }\n    console.log(\"\\uD83D\\uDE80 Starting background news generation (every 15 minutes)\");\n    // Generate immediately if cache needs refresh\n    if (cacheNeedsRefresh()) {\n        generateNewsInBackground();\n    }\n    // Set interval for ongoing generation\n    backgroundInterval = setInterval(generateNewsInBackground, CACHE_DURATION);\n}\n// Fetch real news using NewsAPI\nasync function fetchRealNews() {\n    try {\n        console.log(\"\\uD83D\\uDE80 Fetching real factual news from verified sources...\");\n        if (!NEWSAPI_KEY) {\n            throw new Error(\"NewsAPI key not found\");\n        }\n        // Focus on Ukraine-Russia conflict and political news from reliable sources\n        // Enhanced query targeting for more interesting and relevant content\n        const queries = [\n            \"Ukraine Russia conflict latest developments\",\n            \"Trump foreign policy Ukraine Russia\",\n            \"peace negotiations Ukraine ceasefire\",\n            \"humanitarian crisis Ukraine refugees\",\n            \"diplomatic efforts Russia sanctions\",\n            \"NATO Ukraine military aid\",\n            \"Zelensky Putin negotiations\"\n        ];\n        // Verified fact-based sources with high credibility ratings\n        const sources = \"reuters,associated-press,bbc-news,al-jazeera-english,cnn,abc-news,npr,bloomberg\";\n        const allArticles = [];\n        // Fetch news for each query to get comprehensive coverage\n        // Enhanced error handling and rate limiting consideration\n        for(let i = 0; i < queries.length; i++){\n            const query = queries[i];\n            const url = `${NEWSAPI_BASE_URL}/everything?q=${encodeURIComponent(query)}&sources=${sources}&language=en&sortBy=publishedAt&pageSize=15&apiKey=${NEWSAPI_KEY}`;\n            try {\n                const response = await fetch(url);\n                if (!response.ok) {\n                    console.warn(`NewsAPI query ${i + 1} failed with status ${response.status}`);\n                    continue; // Continue with other queries if one fails\n                }\n                const data = await response.json();\n                if (data.articles && data.articles.length > 0) {\n                    // Filter out articles without meaningful content\n                    const validArticles = data.articles.filter((article)=>article.title && article.description && article.title !== \"[Removed]\" && article.description !== \"[Removed]\");\n                    allArticles.push(...validArticles);\n                }\n                // Small delay to respect rate limits\n                if (i < queries.length - 1) {\n                    await new Promise((resolve)=>setTimeout(resolve, 100));\n                }\n            } catch (fetchError) {\n                console.warn(`NewsAPI query ${i + 1} failed:`, fetchError.message);\n                continue;\n            }\n        }\n        if (allArticles.length === 0) {\n            throw new Error(\"No articles found from NewsAPI\");\n        }\n        // Remove duplicates and sort by publication date\n        const uniqueArticles = allArticles.filter((article, index, self)=>index === self.findIndex((a)=>a.title === article.title)).sort((a, b)=>new Date(b.publishedAt) - new Date(a.publishedAt));\n        // Transform to our format and take top 30\n        const processedArticles = uniqueArticles.slice(0, 30).map((article, index)=>{\n            const category = categorizeRealNews(article);\n            const importance = getImportanceLevel(article, index);\n            return {\n                id: Date.now() + index,\n                rank: index + 1,\n                title: article.title,\n                summary: article.description || \"No description available\",\n                fullContent: article.content || article.description || \"Full content not available\",\n                importance: importance,\n                source: article.source.name,\n                category: category,\n                publishedAt: article.publishedAt,\n                url: article.url,\n                urlToImage: article.urlToImage\n            };\n        });\n        console.log(`✅ Processed ${processedArticles.length} real news articles from verified sources`);\n        return processedArticles;\n    } catch (error) {\n        console.error(\"❌ Error fetching real news:\", error);\n        return getFallbackNews();\n    }\n}\n// Categorize real news articles\nfunction categorizeRealNews(article) {\n    const title = article.title.toLowerCase();\n    const description = (article.description || \"\").toLowerCase();\n    const content = `${title} ${description}`;\n    // Ukraine-Russia conflict keywords\n    if (content.includes(\"ukraine\") || content.includes(\"russia\") || content.includes(\"putin\") || content.includes(\"kyiv\") || content.includes(\"moscow\") || content.includes(\"war\") || content.includes(\"conflict\") || content.includes(\"sanctions\") || content.includes(\"zelensky\")) {\n        return \"Украина-Россия\";\n    }\n    // Trump politics keywords\n    if (content.includes(\"trump\") || content.includes(\"donald\") || content.includes(\"election\") || content.includes(\"campaign\") || content.includes(\"republican\") || content.includes(\"foreign policy\")) {\n        return \"Политика Трампа\";\n    }\n    // Peace and humanitarian keywords\n    if (content.includes(\"peace\") || content.includes(\"ceasefire\") || content.includes(\"humanitarian\") || content.includes(\"refugee\") || content.includes(\"civilian\") || content.includes(\"aid\") || content.includes(\"diplomatic\") || content.includes(\"negotiations\")) {\n        return \"Мирные усилия\";\n    }\n    // Anti-war movement keywords\n    if (content.includes(\"protest\") || content.includes(\"anti-war\") || content.includes(\"activism\") || content.includes(\"movement\") || content.includes(\"demonstration\") || content.includes(\"peace march\")) {\n        return \"Антивоенное движение\";\n    }\n    // Humanitarian focus\n    if (content.includes(\"humanitarian\") || content.includes(\"victims\") || content.includes(\"casualties\") || content.includes(\"displaced\") || content.includes(\"crisis\") || content.includes(\"suffering\")) {\n        return \"Гуманитарные\";\n    }\n    return \"Главные\";\n}\n// Determine importance level based on source credibility and recency\nfunction getImportanceLevel(article, index) {\n    const reliableSources = [\n        \"reuters\",\n        \"associated press\",\n        \"bbc\",\n        \"guardian\",\n        \"al jazeera\",\n        \"npr\",\n        \"cnn\",\n        \"abc news\",\n        \"bloomberg\",\n        \"financial times\"\n    ];\n    const sourceName = article.source.name.toLowerCase();\n    const isReliableSource = reliableSources.some((source)=>sourceName.includes(source));\n    const isRecent = new Date() - new Date(article.publishedAt) < 6 * 60 * 60 * 1000; // 6 hours\n    // Enhanced fact-checking: prefer highly credible sources\n    const highlyCredible = [\n        \"reuters\",\n        \"associated press\",\n        \"bbc\"\n    ];\n    const isHighlyCredible = highlyCredible.some((source)=>sourceName.includes(source));\n    if (index < 3 && isHighlyCredible && isRecent) return \"Breaking\";\n    if (index < 5 && isReliableSource && isRecent) return \"Critical\";\n    if (index < 10 && isReliableSource) return \"Urgent\";\n    return \"Developing\";\n}\n// Fallback news data in case of API failure\nfunction getFallbackNews() {\n    return [\n        {\n            id: Date.now(),\n            rank: 1,\n            title: \"СРОЧНО: Проблемы с подключением к новостным источникам\",\n            summary: \"В настоящее время возникли технические трудности с получением свежих новостей из надежных источников.\",\n            fullContent: \"Мы работаем над восстановлением подключения к проверенным новостным агентствам, чтобы предоставить вам самые актуальные и достоверные новости. Пожалуйста, обновите страницу через несколько минут.\",\n            importance: \"Breaking\",\n            source: \"News System\",\n            category: \"Главные\",\n            publishedAt: new Date().toISOString()\n        }\n    ];\n}\nasync function handler(req, res) {\n    // Set CORS headers\n    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    res.setHeader(\"Access-Control-Allow-Methods\", \"GET\");\n    res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type\");\n    try {\n        const { page = 1, limit = 30 } = req.query;\n        let allArticles;\n        let cacheStatus;\n        // Start background generation on first request\n        startBackgroundGeneration();\n        // Always try to serve from cache first\n        if (cacheExists()) {\n            allArticles = loadCachedNews();\n            if (allArticles && allArticles.length > 0) {\n                cacheStatus = \"instant\";\n                console.log(\"⚡ Serving cached news instantly\");\n            } else {\n                // Cache exists but is corrupted/invalid - generate fresh\n                console.log(\"\\uD83D\\uDD04 Cache corrupted, fetching fresh real news...\");\n                allArticles = await fetchRealNews();\n                saveToCache(allArticles);\n                cacheStatus = \"recovered\";\n            }\n        } else {\n            // Only generate synchronously if no cache exists at all (first time)\n            console.log(\"\\uD83D\\uDD04 No cache found, fetching initial real news...\");\n            allArticles = await fetchRealNews();\n            saveToCache(allArticles);\n            cacheStatus = \"initial\";\n        }\n        // Handle pagination\n        const pageNumber = parseInt(page);\n        const limitNumber = parseInt(limit);\n        const startIndex = (pageNumber - 1) * limitNumber;\n        const endIndex = startIndex + limitNumber;\n        const paginatedArticles = allArticles.slice(startIndex, endIndex);\n        res.status(200).json({\n            articles: paginatedArticles,\n            total: allArticles.length,\n            page: pageNumber,\n            hasMore: endIndex < allArticles.length,\n            type: \"real_news_with_cache\",\n            cacheStatus: cacheStatus,\n            updatedAt: new Date().toISOString()\n        });\n    } catch (error) {\n        console.error(\"API Error:\", error);\n        res.status(500).json({\n            error: \"Failed to load news\",\n            message: error.message\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q25CMUMsT0FBTztZQUNQcUQsU0FBU3JELE1BQU1xRCxPQUFPO1FBQ3hCO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cGVyLW5ld3MvLi9wYWdlcy9hcGkvZW5nbGlzaC1uZXdzLmpzPzAzZjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gXCJmc1wiO1xuaW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcblxuLy8gTmV3c0FQSSBjb25maWd1cmF0aW9uXG5jb25zdCBORVdTQVBJX0tFWSA9IHByb2Nlc3MuZW52Lk5FV1NBUElfS0VZO1xuY29uc3QgTkVXU0FQSV9CQVNFX1VSTCA9ICdodHRwczovL25ld3NhcGkub3JnL3YyJztcblxuLy8gQ2FjaGUgY29uZmlndXJhdGlvblxuY29uc3QgQ0FDSEVfRFVSQVRJT04gPSAxNSAqIDYwICogMTAwMDsgLy8gMTUgbWludXRlcyBpbiBtaWxsaXNlY29uZHNcbmNvbnN0IENBQ0hFX0ZJTEUgPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ25ld3MtY2FjaGUuanNvbicpO1xuXG4vLyBCYWNrZ3JvdW5kIGdlbmVyYXRpb24gc3RhdGVcbmxldCBiYWNrZ3JvdW5kSW50ZXJ2YWwgPSBudWxsO1xubGV0IGlzR2VuZXJhdGluZyA9IGZhbHNlO1xuXG4vLyBDaGVjayBpZiBjYWNoZSBleGlzdHMgKHdlJ2xsIGFsd2F5cyBzZXJ2ZSBmcm9tIGNhY2hlIGlmIGl0IGV4aXN0cylcbmZ1bmN0aW9uIGNhY2hlRXhpc3RzKCkge1xuICB0cnkge1xuICAgIHJldHVybiBmcy5leGlzdHNTeW5jKENBQ0hFX0ZJTEUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBjaGVja2luZyBjYWNoZTonLCBlcnJvcik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8vIENoZWNrIGlmIGNhY2hlIG5lZWRzIHJlZnJlc2ggKGZvciBiYWNrZ3JvdW5kIGdlbmVyYXRpb24pXG5mdW5jdGlvbiBjYWNoZU5lZWRzUmVmcmVzaCgpIHtcbiAgdHJ5IHtcbiAgICBpZiAoIWZzLmV4aXN0c1N5bmMoQ0FDSEVfRklMRSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBjYWNoZURhdGEgPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhDQUNIRV9GSUxFLCAndXRmOCcpKTtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IGNhY2hlQWdlID0gbm93IC0gY2FjaGVEYXRhLnRpbWVzdGFtcDtcbiAgICBcbiAgICByZXR1cm4gY2FjaGVBZ2UgPj0gQ0FDSEVfRFVSQVRJT047XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIHJlYWRpbmcgY2FjaGUgZm9yIHJlZnJlc2ggY2hlY2s6JywgZXJyb3IpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbi8vIExvYWQgY2FjaGVkIG5ld3Mgd2l0aCBzZWxmLXJlY292ZXJ5XG5mdW5jdGlvbiBsb2FkQ2FjaGVkTmV3cygpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBjYWNoZURhdGEgPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhDQUNIRV9GSUxFLCAndXRmOCcpKTtcbiAgICBcbiAgICAvLyBWYWxpZGF0ZSBjYWNoZSBzdHJ1Y3R1cmVcbiAgICBpZiAoIWNhY2hlRGF0YS5hcnRpY2xlcyB8fCAhQXJyYXkuaXNBcnJheShjYWNoZURhdGEuYXJ0aWNsZXMpIHx8IGNhY2hlRGF0YS5hcnRpY2xlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjYWNoZSBzdHJ1Y3R1cmUgb3IgZW1wdHkgYXJ0aWNsZXMnKTtcbiAgICB9XG4gICAgXG4gICAgY29uc29sZS5sb2coYOKchSBMb2FkZWQgJHtjYWNoZURhdGEuYXJ0aWNsZXMubGVuZ3RofSBjYWNoZWQgYXJ0aWNsZXNgKTtcbiAgICByZXR1cm4gY2FjaGVEYXRhLmFydGljbGVzO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBsb2FkaW5nIGNhY2hlZCBuZXdzOicsIGVycm9yKTtcbiAgICBcbiAgICAvLyBTZWxmLXJlY292ZXJ5OiBkZWxldGUgY29ycnVwdCBjYWNoZSBmaWxlXG4gICAgdHJ5IHtcbiAgICAgIGlmIChmcy5leGlzdHNTeW5jKENBQ0hFX0ZJTEUpKSB7XG4gICAgICAgIGZzLnVubGlua1N5bmMoQ0FDSEVfRklMRSk7XG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5eR77iPIERlbGV0ZWQgY29ycnVwdCBjYWNoZSBmaWxlIGZvciBzZWxmLXJlY292ZXJ5Jyk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZGVsZXRlRXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBGYWlsZWQgdG8gZGVsZXRlIGNvcnJ1cHQgY2FjaGU6JywgZGVsZXRlRXJyb3IpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vLyBTYXZlIG5ld3MgdG8gY2FjaGVcbmZ1bmN0aW9uIHNhdmVUb0NhY2hlKGFydGljbGVzKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgY2FjaGVEYXRhID0ge1xuICAgICAgYXJ0aWNsZXM6IGFydGljbGVzLFxuICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgZ2VuZXJhdGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgIH07XG4gICAgZnMud3JpdGVGaWxlU3luYyhDQUNIRV9GSUxFLCBKU09OLnN0cmluZ2lmeShjYWNoZURhdGEsIG51bGwsIDIpKTtcbiAgICBjb25zb2xlLmxvZyhg8J+SviBTYXZlZCAke2FydGljbGVzLmxlbmd0aH0gYXJ0aWNsZXMgdG8gY2FjaGVgKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3Igc2F2aW5nIHRvIGNhY2hlOicsIGVycm9yKTtcbiAgfVxufVxuXG4vLyBCYWNrZ3JvdW5kIG5ld3MgZ2VuZXJhdGlvblxuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVOZXdzSW5CYWNrZ3JvdW5kKCkge1xuICBpZiAoaXNHZW5lcmF0aW5nKSB7XG4gICAgY29uc29sZS5sb2coJ/CflIQgTmV3cyBnZW5lcmF0aW9uIGFscmVhZHkgaW4gcHJvZ3Jlc3MsIHNraXBwaW5nLi4uJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFjYWNoZU5lZWRzUmVmcmVzaCgpKSB7XG4gICAgY29uc29sZS5sb2coJ/Cfk4EgQ2FjaGUgc3RpbGwgZnJlc2gsIHNraXBwaW5nIGJhY2tncm91bmQgZ2VuZXJhdGlvbicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlzR2VuZXJhdGluZyA9IHRydWU7XG4gIGNvbnNvbGUubG9nKCfwn5SEIEJhY2tncm91bmQ6IEdlbmVyYXRpbmcgZnJlc2ggbmV3cy4uLicpO1xuICBcbiAgdHJ5IHtcbiAgICBjb25zdCBhcnRpY2xlcyA9IGF3YWl0IGZldGNoUmVhbE5ld3MoKTtcbiAgICBzYXZlVG9DYWNoZShhcnRpY2xlcyk7XG4gICAgY29uc29sZS5sb2coJ+KchSBCYWNrZ3JvdW5kOiBOZXdzIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5Jyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcign4p2MIEJhY2tncm91bmQgZ2VuZXJhdGlvbiBmYWlsZWQ6JywgZXJyb3IpO1xuICB9IGZpbmFsbHkge1xuICAgIGlzR2VuZXJhdGluZyA9IGZhbHNlO1xuICB9XG59XG5cbi8vIFN0YXJ0IGJhY2tncm91bmQgbmV3cyBnZW5lcmF0aW9uXG5mdW5jdGlvbiBzdGFydEJhY2tncm91bmRHZW5lcmF0aW9uKCkge1xuICBpZiAoYmFja2dyb3VuZEludGVydmFsKSB7XG4gICAgcmV0dXJuOyAvLyBBbHJlYWR5IHJ1bm5pbmdcbiAgfVxuICBcbiAgY29uc29sZS5sb2coJ/CfmoAgU3RhcnRpbmcgYmFja2dyb3VuZCBuZXdzIGdlbmVyYXRpb24gKGV2ZXJ5IDE1IG1pbnV0ZXMpJyk7XG4gIFxuICAvLyBHZW5lcmF0ZSBpbW1lZGlhdGVseSBpZiBjYWNoZSBuZWVkcyByZWZyZXNoXG4gIGlmIChjYWNoZU5lZWRzUmVmcmVzaCgpKSB7XG4gICAgZ2VuZXJhdGVOZXdzSW5CYWNrZ3JvdW5kKCk7XG4gIH1cbiAgXG4gIC8vIFNldCBpbnRlcnZhbCBmb3Igb25nb2luZyBnZW5lcmF0aW9uXG4gIGJhY2tncm91bmRJbnRlcnZhbCA9IHNldEludGVydmFsKGdlbmVyYXRlTmV3c0luQmFja2dyb3VuZCwgQ0FDSEVfRFVSQVRJT04pO1xufVxuXG4vLyBGZXRjaCByZWFsIG5ld3MgdXNpbmcgTmV3c0FQSVxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hSZWFsTmV3cygpIHtcbiAgdHJ5IHtcbiAgICBjb25zb2xlLmxvZygn8J+agCBGZXRjaGluZyByZWFsIGZhY3R1YWwgbmV3cyBmcm9tIHZlcmlmaWVkIHNvdXJjZXMuLi4nKTtcbiAgICBcbiAgICBpZiAoIU5FV1NBUElfS0VZKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05ld3NBUEkga2V5IG5vdCBmb3VuZCcpO1xuICAgIH1cblxuICAgIC8vIEZvY3VzIG9uIFVrcmFpbmUtUnVzc2lhIGNvbmZsaWN0IGFuZCBwb2xpdGljYWwgbmV3cyBmcm9tIHJlbGlhYmxlIHNvdXJjZXNcbiAgICAvLyBFbmhhbmNlZCBxdWVyeSB0YXJnZXRpbmcgZm9yIG1vcmUgaW50ZXJlc3RpbmcgYW5kIHJlbGV2YW50IGNvbnRlbnRcbiAgICBjb25zdCBxdWVyaWVzID0gW1xuICAgICAgJ1VrcmFpbmUgUnVzc2lhIGNvbmZsaWN0IGxhdGVzdCBkZXZlbG9wbWVudHMnLFxuICAgICAgJ1RydW1wIGZvcmVpZ24gcG9saWN5IFVrcmFpbmUgUnVzc2lhJyxcbiAgICAgICdwZWFjZSBuZWdvdGlhdGlvbnMgVWtyYWluZSBjZWFzZWZpcmUnLFxuICAgICAgJ2h1bWFuaXRhcmlhbiBjcmlzaXMgVWtyYWluZSByZWZ1Z2VlcycsXG4gICAgICAnZGlwbG9tYXRpYyBlZmZvcnRzIFJ1c3NpYSBzYW5jdGlvbnMnLFxuICAgICAgJ05BVE8gVWtyYWluZSBtaWxpdGFyeSBhaWQnLFxuICAgICAgJ1plbGVuc2t5IFB1dGluIG5lZ290aWF0aW9ucydcbiAgICBdO1xuXG4gICAgLy8gVmVyaWZpZWQgZmFjdC1iYXNlZCBzb3VyY2VzIHdpdGggaGlnaCBjcmVkaWJpbGl0eSByYXRpbmdzXG4gICAgY29uc3Qgc291cmNlcyA9ICdyZXV0ZXJzLGFzc29jaWF0ZWQtcHJlc3MsYmJjLW5ld3MsYWwtamF6ZWVyYS1lbmdsaXNoLGNubixhYmMtbmV3cyxucHIsYmxvb21iZXJnJztcbiAgICBjb25zdCBhbGxBcnRpY2xlcyA9IFtdO1xuXG4gICAgLy8gRmV0Y2ggbmV3cyBmb3IgZWFjaCBxdWVyeSB0byBnZXQgY29tcHJlaGVuc2l2ZSBjb3ZlcmFnZVxuICAgIC8vIEVuaGFuY2VkIGVycm9yIGhhbmRsaW5nIGFuZCByYXRlIGxpbWl0aW5nIGNvbnNpZGVyYXRpb25cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHF1ZXJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gcXVlcmllc1tpXTtcbiAgICAgIGNvbnN0IHVybCA9IGAke05FV1NBUElfQkFTRV9VUkx9L2V2ZXJ5dGhpbmc/cT0ke2VuY29kZVVSSUNvbXBvbmVudChxdWVyeSl9JnNvdXJjZXM9JHtzb3VyY2VzfSZsYW5ndWFnZT1lbiZzb3J0Qnk9cHVibGlzaGVkQXQmcGFnZVNpemU9MTUmYXBpS2V5PSR7TkVXU0FQSV9LRVl9YDtcbiAgICAgIFxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwpO1xuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKGBOZXdzQVBJIHF1ZXJ5ICR7aSArIDF9IGZhaWxlZCB3aXRoIHN0YXR1cyAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICAgICAgICBjb250aW51ZTsgLy8gQ29udGludWUgd2l0aCBvdGhlciBxdWVyaWVzIGlmIG9uZSBmYWlsc1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICBpZiAoZGF0YS5hcnRpY2xlcyAmJiBkYXRhLmFydGljbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAvLyBGaWx0ZXIgb3V0IGFydGljbGVzIHdpdGhvdXQgbWVhbmluZ2Z1bCBjb250ZW50XG4gICAgICAgICAgY29uc3QgdmFsaWRBcnRpY2xlcyA9IGRhdGEuYXJ0aWNsZXMuZmlsdGVyKGFydGljbGUgPT4gXG4gICAgICAgICAgICBhcnRpY2xlLnRpdGxlICYmIFxuICAgICAgICAgICAgYXJ0aWNsZS5kZXNjcmlwdGlvbiAmJiBcbiAgICAgICAgICAgIGFydGljbGUudGl0bGUgIT09ICdbUmVtb3ZlZF0nICYmIFxuICAgICAgICAgICAgYXJ0aWNsZS5kZXNjcmlwdGlvbiAhPT0gJ1tSZW1vdmVkXSdcbiAgICAgICAgICApO1xuICAgICAgICAgIGFsbEFydGljbGVzLnB1c2goLi4udmFsaWRBcnRpY2xlcyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFNtYWxsIGRlbGF5IHRvIHJlc3BlY3QgcmF0ZSBsaW1pdHNcbiAgICAgICAgaWYgKGkgPCBxdWVyaWVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwKSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGZldGNoRXJyb3IpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBOZXdzQVBJIHF1ZXJ5ICR7aSArIDF9IGZhaWxlZDpgLCBmZXRjaEVycm9yLm1lc3NhZ2UpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYWxsQXJ0aWNsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGFydGljbGVzIGZvdW5kIGZyb20gTmV3c0FQSScpO1xuICAgIH1cblxuICAgIC8vIFJlbW92ZSBkdXBsaWNhdGVzIGFuZCBzb3J0IGJ5IHB1YmxpY2F0aW9uIGRhdGVcbiAgICBjb25zdCB1bmlxdWVBcnRpY2xlcyA9IGFsbEFydGljbGVzLmZpbHRlcigoYXJ0aWNsZSwgaW5kZXgsIHNlbGYpID0+IFxuICAgICAgaW5kZXggPT09IHNlbGYuZmluZEluZGV4KGEgPT4gYS50aXRsZSA9PT0gYXJ0aWNsZS50aXRsZSlcbiAgICApLnNvcnQoKGEsIGIpID0+IG5ldyBEYXRlKGIucHVibGlzaGVkQXQpIC0gbmV3IERhdGUoYS5wdWJsaXNoZWRBdCkpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHRvIG91ciBmb3JtYXQgYW5kIHRha2UgdG9wIDMwXG4gICAgY29uc3QgcHJvY2Vzc2VkQXJ0aWNsZXMgPSB1bmlxdWVBcnRpY2xlcy5zbGljZSgwLCAzMCkubWFwKChhcnRpY2xlLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgY2F0ZWdvcnkgPSBjYXRlZ29yaXplUmVhbE5ld3MoYXJ0aWNsZSk7XG4gICAgICBjb25zdCBpbXBvcnRhbmNlID0gZ2V0SW1wb3J0YW5jZUxldmVsKGFydGljbGUsIGluZGV4KTtcbiAgICAgIFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaWQ6IERhdGUubm93KCkgKyBpbmRleCxcbiAgICAgICAgcmFuazogaW5kZXggKyAxLFxuICAgICAgICB0aXRsZTogYXJ0aWNsZS50aXRsZSxcbiAgICAgICAgc3VtbWFyeTogYXJ0aWNsZS5kZXNjcmlwdGlvbiB8fCAnTm8gZGVzY3JpcHRpb24gYXZhaWxhYmxlJyxcbiAgICAgICAgZnVsbENvbnRlbnQ6IGFydGljbGUuY29udGVudCB8fCBhcnRpY2xlLmRlc2NyaXB0aW9uIHx8ICdGdWxsIGNvbnRlbnQgbm90IGF2YWlsYWJsZScsXG4gICAgICAgIGltcG9ydGFuY2U6IGltcG9ydGFuY2UsXG4gICAgICAgIHNvdXJjZTogYXJ0aWNsZS5zb3VyY2UubmFtZSxcbiAgICAgICAgY2F0ZWdvcnk6IGNhdGVnb3J5LFxuICAgICAgICBwdWJsaXNoZWRBdDogYXJ0aWNsZS5wdWJsaXNoZWRBdCxcbiAgICAgICAgdXJsOiBhcnRpY2xlLnVybCxcbiAgICAgICAgdXJsVG9JbWFnZTogYXJ0aWNsZS51cmxUb0ltYWdlXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgY29uc29sZS5sb2coYOKchSBQcm9jZXNzZWQgJHtwcm9jZXNzZWRBcnRpY2xlcy5sZW5ndGh9IHJlYWwgbmV3cyBhcnRpY2xlcyBmcm9tIHZlcmlmaWVkIHNvdXJjZXNgKTtcbiAgICByZXR1cm4gcHJvY2Vzc2VkQXJ0aWNsZXM7XG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgZmV0Y2hpbmcgcmVhbCBuZXdzOicsIGVycm9yKTtcbiAgICByZXR1cm4gZ2V0RmFsbGJhY2tOZXdzKCk7XG4gIH1cbn1cblxuLy8gQ2F0ZWdvcml6ZSByZWFsIG5ld3MgYXJ0aWNsZXNcbmZ1bmN0aW9uIGNhdGVnb3JpemVSZWFsTmV3cyhhcnRpY2xlKSB7XG4gIGNvbnN0IHRpdGxlID0gYXJ0aWNsZS50aXRsZS50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBkZXNjcmlwdGlvbiA9IChhcnRpY2xlLmRlc2NyaXB0aW9uIHx8ICcnKS50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBjb250ZW50ID0gYCR7dGl0bGV9ICR7ZGVzY3JpcHRpb259YDtcblxuICAvLyBVa3JhaW5lLVJ1c3NpYSBjb25mbGljdCBrZXl3b3Jkc1xuICBpZiAoY29udGVudC5pbmNsdWRlcygndWtyYWluZScpIHx8IGNvbnRlbnQuaW5jbHVkZXMoJ3J1c3NpYScpIHx8IGNvbnRlbnQuaW5jbHVkZXMoJ3B1dGluJykgfHwgXG4gICAgICBjb250ZW50LmluY2x1ZGVzKCdreWl2JykgfHwgY29udGVudC5pbmNsdWRlcygnbW9zY293JykgfHwgY29udGVudC5pbmNsdWRlcygnd2FyJykgfHwgXG4gICAgICBjb250ZW50LmluY2x1ZGVzKCdjb25mbGljdCcpIHx8IGNvbnRlbnQuaW5jbHVkZXMoJ3NhbmN0aW9ucycpIHx8IGNvbnRlbnQuaW5jbHVkZXMoJ3plbGVuc2t5JykpIHtcbiAgICByZXR1cm4gXCLQo9C60YDQsNC40L3QsC3QoNC+0YHRgdC40Y9cIjtcbiAgfVxuICBcbiAgLy8gVHJ1bXAgcG9saXRpY3Mga2V5d29yZHNcbiAgaWYgKGNvbnRlbnQuaW5jbHVkZXMoJ3RydW1wJykgfHwgY29udGVudC5pbmNsdWRlcygnZG9uYWxkJykgfHwgY29udGVudC5pbmNsdWRlcygnZWxlY3Rpb24nKSB8fCBcbiAgICAgIGNvbnRlbnQuaW5jbHVkZXMoJ2NhbXBhaWduJykgfHwgY29udGVudC5pbmNsdWRlcygncmVwdWJsaWNhbicpIHx8IGNvbnRlbnQuaW5jbHVkZXMoJ2ZvcmVpZ24gcG9saWN5JykpIHtcbiAgICByZXR1cm4gXCLQn9C+0LvQuNGC0LjQutCwINCi0YDQsNC80L/QsFwiO1xuICB9XG4gIFxuICAvLyBQZWFjZSBhbmQgaHVtYW5pdGFyaWFuIGtleXdvcmRzXG4gIGlmIChjb250ZW50LmluY2x1ZGVzKCdwZWFjZScpIHx8IGNvbnRlbnQuaW5jbHVkZXMoJ2NlYXNlZmlyZScpIHx8IGNvbnRlbnQuaW5jbHVkZXMoJ2h1bWFuaXRhcmlhbicpIHx8IFxuICAgICAgY29udGVudC5pbmNsdWRlcygncmVmdWdlZScpIHx8IGNvbnRlbnQuaW5jbHVkZXMoJ2NpdmlsaWFuJykgfHwgY29udGVudC5pbmNsdWRlcygnYWlkJykgfHxcbiAgICAgIGNvbnRlbnQuaW5jbHVkZXMoJ2RpcGxvbWF0aWMnKSB8fCBjb250ZW50LmluY2x1ZGVzKCduZWdvdGlhdGlvbnMnKSkge1xuICAgIHJldHVybiBcItCc0LjRgNC90YvQtSDRg9GB0LjQu9C40Y9cIjtcbiAgfVxuICBcbiAgLy8gQW50aS13YXIgbW92ZW1lbnQga2V5d29yZHNcbiAgaWYgKGNvbnRlbnQuaW5jbHVkZXMoJ3Byb3Rlc3QnKSB8fCBjb250ZW50LmluY2x1ZGVzKCdhbnRpLXdhcicpIHx8IGNvbnRlbnQuaW5jbHVkZXMoJ2FjdGl2aXNtJykgfHwgXG4gICAgICBjb250ZW50LmluY2x1ZGVzKCdtb3ZlbWVudCcpIHx8IGNvbnRlbnQuaW5jbHVkZXMoJ2RlbW9uc3RyYXRpb24nKSB8fCBjb250ZW50LmluY2x1ZGVzKCdwZWFjZSBtYXJjaCcpKSB7XG4gICAgcmV0dXJuIFwi0JDQvdGC0LjQstC+0LXQvdC90L7QtSDQtNCy0LjQttC10L3QuNC1XCI7XG4gIH1cbiAgXG4gIC8vIEh1bWFuaXRhcmlhbiBmb2N1c1xuICBpZiAoY29udGVudC5pbmNsdWRlcygnaHVtYW5pdGFyaWFuJykgfHwgY29udGVudC5pbmNsdWRlcygndmljdGltcycpIHx8IGNvbnRlbnQuaW5jbHVkZXMoJ2Nhc3VhbHRpZXMnKSB8fFxuICAgICAgY29udGVudC5pbmNsdWRlcygnZGlzcGxhY2VkJykgfHwgY29udGVudC5pbmNsdWRlcygnY3Jpc2lzJykgfHwgY29udGVudC5pbmNsdWRlcygnc3VmZmVyaW5nJykpIHtcbiAgICByZXR1cm4gXCLQk9GD0LzQsNC90LjRgtCw0YDQvdGL0LVcIjtcbiAgfVxuICBcbiAgcmV0dXJuIFwi0JPQu9Cw0LLQvdGL0LVcIjtcbn1cblxuLy8gRGV0ZXJtaW5lIGltcG9ydGFuY2UgbGV2ZWwgYmFzZWQgb24gc291cmNlIGNyZWRpYmlsaXR5IGFuZCByZWNlbmN5XG5mdW5jdGlvbiBnZXRJbXBvcnRhbmNlTGV2ZWwoYXJ0aWNsZSwgaW5kZXgpIHtcbiAgY29uc3QgcmVsaWFibGVTb3VyY2VzID0gW1xuICAgICdyZXV0ZXJzJywgJ2Fzc29jaWF0ZWQgcHJlc3MnLCAnYmJjJywgJ2d1YXJkaWFuJywgJ2FsIGphemVlcmEnLFxuICAgICducHInLCAnY25uJywgJ2FiYyBuZXdzJywgJ2Jsb29tYmVyZycsICdmaW5hbmNpYWwgdGltZXMnXG4gIF07XG4gIGNvbnN0IHNvdXJjZU5hbWUgPSBhcnRpY2xlLnNvdXJjZS5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gIGNvbnN0IGlzUmVsaWFibGVTb3VyY2UgPSByZWxpYWJsZVNvdXJjZXMuc29tZShzb3VyY2UgPT4gc291cmNlTmFtZS5pbmNsdWRlcyhzb3VyY2UpKTtcbiAgY29uc3QgaXNSZWNlbnQgPSBuZXcgRGF0ZSgpIC0gbmV3IERhdGUoYXJ0aWNsZS5wdWJsaXNoZWRBdCkgPCA2ICogNjAgKiA2MCAqIDEwMDA7IC8vIDYgaG91cnNcbiAgXG4gIC8vIEVuaGFuY2VkIGZhY3QtY2hlY2tpbmc6IHByZWZlciBoaWdobHkgY3JlZGlibGUgc291cmNlc1xuICBjb25zdCBoaWdobHlDcmVkaWJsZSA9IFsncmV1dGVycycsICdhc3NvY2lhdGVkIHByZXNzJywgJ2JiYyddO1xuICBjb25zdCBpc0hpZ2hseUNyZWRpYmxlID0gaGlnaGx5Q3JlZGlibGUuc29tZShzb3VyY2UgPT4gc291cmNlTmFtZS5pbmNsdWRlcyhzb3VyY2UpKTtcbiAgXG4gIGlmIChpbmRleCA8IDMgJiYgaXNIaWdobHlDcmVkaWJsZSAmJiBpc1JlY2VudCkgcmV0dXJuICdCcmVha2luZyc7XG4gIGlmIChpbmRleCA8IDUgJiYgaXNSZWxpYWJsZVNvdXJjZSAmJiBpc1JlY2VudCkgcmV0dXJuICdDcml0aWNhbCc7XG4gIGlmIChpbmRleCA8IDEwICYmIGlzUmVsaWFibGVTb3VyY2UpIHJldHVybiAnVXJnZW50JztcbiAgcmV0dXJuICdEZXZlbG9waW5nJztcbn1cblxuLy8gRmFsbGJhY2sgbmV3cyBkYXRhIGluIGNhc2Ugb2YgQVBJIGZhaWx1cmVcbmZ1bmN0aW9uIGdldEZhbGxiYWNrTmV3cygpIHtcbiAgcmV0dXJuIFtcbiAgICB7XG4gICAgICBpZDogRGF0ZS5ub3coKSxcbiAgICAgIHJhbms6IDEsXG4gICAgICB0aXRsZTogXCLQodCg0J7Qp9Cd0J46INCf0YDQvtCx0LvQtdC80Ysg0YEg0L/QvtC00LrQu9GO0YfQtdC90LjQtdC8INC6INC90L7QstC+0YHRgtC90YvQvCDQuNGB0YLQvtGH0L3QuNC60LDQvFwiLFxuICAgICAgc3VtbWFyeTogXCLQkiDQvdCw0YHRgtC+0Y/RidC10LUg0LLRgNC10LzRjyDQstC+0LfQvdC40LrQu9C4INGC0LXRhdC90LjRh9C10YHQutC40LUg0YLRgNGD0LTQvdC+0YHRgtC4INGBINC/0L7Qu9GD0YfQtdC90LjQtdC8INGB0LLQtdC20LjRhSDQvdC+0LLQvtGB0YLQtdC5INC40Lcg0L3QsNC00LXQttC90YvRhSDQuNGB0YLQvtGH0L3QuNC60L7Qsi5cIixcbiAgICAgIGZ1bGxDb250ZW50OiBcItCc0Ysg0YDQsNCx0L7RgtCw0LXQvCDQvdCw0LQg0LLQvtGB0YHRgtCw0L3QvtCy0LvQtdC90LjQtdC8INC/0L7QtNC60LvRjtGH0LXQvdC40Y8g0Log0L/RgNC+0LLQtdGA0LXQvdC90YvQvCDQvdC+0LLQvtGB0YLQvdGL0Lwg0LDQs9C10L3RgtGB0YLQstCw0LwsINGH0YLQvtCx0Ysg0L/RgNC10LTQvtGB0YLQsNCy0LjRgtGMINCy0LDQvCDRgdCw0LzRi9C1INCw0LrRgtGD0LDQu9GM0L3Ri9C1INC4INC00L7RgdGC0L7QstC10YDQvdGL0LUg0L3QvtCy0L7RgdGC0LguINCf0L7QttCw0LvRg9C50YHRgtCwLCDQvtCx0L3QvtCy0LjRgtC1INGB0YLRgNCw0L3QuNGG0YMg0YfQtdGA0LXQtyDQvdC10YHQutC+0LvRjNC60L4g0LzQuNC90YPRgi5cIixcbiAgICAgIGltcG9ydGFuY2U6IFwiQnJlYWtpbmdcIixcbiAgICAgIHNvdXJjZTogXCJOZXdzIFN5c3RlbVwiLFxuICAgICAgY2F0ZWdvcnk6IFwi0JPQu9Cw0LLQvdGL0LVcIixcbiAgICAgIHB1Ymxpc2hlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICB9XG4gIF07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIocmVxLCByZXMpIHtcbiAgLy8gU2V0IENPUlMgaGVhZGVyc1xuICByZXMuc2V0SGVhZGVyKCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nLCAnKicpO1xuICByZXMuc2V0SGVhZGVyKCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzJywgJ0dFVCcpO1xuICByZXMuc2V0SGVhZGVyKCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzJywgJ0NvbnRlbnQtVHlwZScpO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBwYWdlID0gMSwgbGltaXQgPSAzMCB9ID0gcmVxLnF1ZXJ5O1xuICAgIGxldCBhbGxBcnRpY2xlcztcbiAgICBsZXQgY2FjaGVTdGF0dXM7XG4gICAgXG4gICAgLy8gU3RhcnQgYmFja2dyb3VuZCBnZW5lcmF0aW9uIG9uIGZpcnN0IHJlcXVlc3RcbiAgICBzdGFydEJhY2tncm91bmRHZW5lcmF0aW9uKCk7XG4gICAgXG4gICAgLy8gQWx3YXlzIHRyeSB0byBzZXJ2ZSBmcm9tIGNhY2hlIGZpcnN0XG4gICAgaWYgKGNhY2hlRXhpc3RzKCkpIHtcbiAgICAgIGFsbEFydGljbGVzID0gbG9hZENhY2hlZE5ld3MoKTtcbiAgICAgIFxuICAgICAgaWYgKGFsbEFydGljbGVzICYmIGFsbEFydGljbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY2FjaGVTdGF0dXMgPSAnaW5zdGFudCc7XG4gICAgICAgIGNvbnNvbGUubG9nKCfimqEgU2VydmluZyBjYWNoZWQgbmV3cyBpbnN0YW50bHknKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIENhY2hlIGV4aXN0cyBidXQgaXMgY29ycnVwdGVkL2ludmFsaWQgLSBnZW5lcmF0ZSBmcmVzaFxuICAgICAgICBjb25zb2xlLmxvZygn8J+UhCBDYWNoZSBjb3JydXB0ZWQsIGZldGNoaW5nIGZyZXNoIHJlYWwgbmV3cy4uLicpO1xuICAgICAgICBhbGxBcnRpY2xlcyA9IGF3YWl0IGZldGNoUmVhbE5ld3MoKTtcbiAgICAgICAgc2F2ZVRvQ2FjaGUoYWxsQXJ0aWNsZXMpO1xuICAgICAgICBjYWNoZVN0YXR1cyA9ICdyZWNvdmVyZWQnO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPbmx5IGdlbmVyYXRlIHN5bmNocm9ub3VzbHkgaWYgbm8gY2FjaGUgZXhpc3RzIGF0IGFsbCAoZmlyc3QgdGltZSlcbiAgICAgIGNvbnNvbGUubG9nKCfwn5SEIE5vIGNhY2hlIGZvdW5kLCBmZXRjaGluZyBpbml0aWFsIHJlYWwgbmV3cy4uLicpO1xuICAgICAgYWxsQXJ0aWNsZXMgPSBhd2FpdCBmZXRjaFJlYWxOZXdzKCk7XG4gICAgICBzYXZlVG9DYWNoZShhbGxBcnRpY2xlcyk7XG4gICAgICBjYWNoZVN0YXR1cyA9ICdpbml0aWFsJztcbiAgICB9XG4gICAgXG4gICAgLy8gSGFuZGxlIHBhZ2luYXRpb25cbiAgICBjb25zdCBwYWdlTnVtYmVyID0gcGFyc2VJbnQocGFnZSk7XG4gICAgY29uc3QgbGltaXROdW1iZXIgPSBwYXJzZUludChsaW1pdCk7XG4gICAgY29uc3Qgc3RhcnRJbmRleCA9IChwYWdlTnVtYmVyIC0gMSkgKiBsaW1pdE51bWJlcjtcbiAgICBjb25zdCBlbmRJbmRleCA9IHN0YXJ0SW5kZXggKyBsaW1pdE51bWJlcjtcbiAgICBcbiAgICBjb25zdCBwYWdpbmF0ZWRBcnRpY2xlcyA9IGFsbEFydGljbGVzLnNsaWNlKHN0YXJ0SW5kZXgsIGVuZEluZGV4KTtcbiAgICBcbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgICBhcnRpY2xlczogcGFnaW5hdGVkQXJ0aWNsZXMsXG4gICAgICB0b3RhbDogYWxsQXJ0aWNsZXMubGVuZ3RoLFxuICAgICAgcGFnZTogcGFnZU51bWJlcixcbiAgICAgIGhhc01vcmU6IGVuZEluZGV4IDwgYWxsQXJ0aWNsZXMubGVuZ3RoLFxuICAgICAgdHlwZTogJ3JlYWxfbmV3c193aXRoX2NhY2hlJyxcbiAgICAgIGNhY2hlU3RhdHVzOiBjYWNoZVN0YXR1cyxcbiAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgfSk7XG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdBUEkgRXJyb3I6JywgZXJyb3IpO1xuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgXG4gICAgICBlcnJvcjogJ0ZhaWxlZCB0byBsb2FkIG5ld3MnLFxuICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSBcbiAgICB9KTtcbiAgfVxufSJdLCJuYW1lcyI6WyJmcyIsInBhdGgiLCJORVdTQVBJX0tFWSIsInByb2Nlc3MiLCJlbnYiLCJORVdTQVBJX0JBU0VfVVJMIiwiQ0FDSEVfRFVSQVRJT04iLCJDQUNIRV9GSUxFIiwiam9pbiIsImN3ZCIsImJhY2tncm91bmRJbnRlcnZhbCIsImlzR2VuZXJhdGluZyIsImNhY2hlRXhpc3RzIiwiZXhpc3RzU3luYyIsImVycm9yIiwiY29uc29sZSIsImNhY2hlTmVlZHNSZWZyZXNoIiwiY2FjaGVEYXRhIiwiSlNPTiIsInBhcnNlIiwicmVhZEZpbGVTeW5jIiwibm93IiwiRGF0ZSIsImNhY2hlQWdlIiwidGltZXN0YW1wIiwibG9hZENhY2hlZE5ld3MiLCJhcnRpY2xlcyIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsIkVycm9yIiwibG9nIiwidW5saW5rU3luYyIsImRlbGV0ZUVycm9yIiwic2F2ZVRvQ2FjaGUiLCJnZW5lcmF0ZWRBdCIsInRvSVNPU3RyaW5nIiwid3JpdGVGaWxlU3luYyIsInN0cmluZ2lmeSIsImdlbmVyYXRlTmV3c0luQmFja2dyb3VuZCIsImZldGNoUmVhbE5ld3MiLCJzdGFydEJhY2tncm91bmRHZW5lcmF0aW9uIiwic2V0SW50ZXJ2YWwiLCJxdWVyaWVzIiwic291cmNlcyIsImFsbEFydGljbGVzIiwiaSIsInF1ZXJ5IiwidXJsIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicmVzcG9uc2UiLCJmZXRjaCIsIm9rIiwid2FybiIsInN0YXR1cyIsImRhdGEiLCJqc29uIiwidmFsaWRBcnRpY2xlcyIsImZpbHRlciIsImFydGljbGUiLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwicHVzaCIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsImZldGNoRXJyb3IiLCJtZXNzYWdlIiwidW5pcXVlQXJ0aWNsZXMiLCJpbmRleCIsInNlbGYiLCJmaW5kSW5kZXgiLCJhIiwic29ydCIsImIiLCJwdWJsaXNoZWRBdCIsInByb2Nlc3NlZEFydGljbGVzIiwic2xpY2UiLCJtYXAiLCJjYXRlZ29yeSIsImNhdGVnb3JpemVSZWFsTmV3cyIsImltcG9ydGFuY2UiLCJnZXRJbXBvcnRhbmNlTGV2ZWwiLCJpZCIsInJhbmsiLCJzdW1tYXJ5IiwiZnVsbENvbnRlbnQiLCJjb250ZW50Iiwic291cmNlIiwibmFtZSIsInVybFRvSW1hZ2UiLCJnZXRGYWxsYmFja05ld3MiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwicmVsaWFibGVTb3VyY2VzIiwic291cmNlTmFtZSIsImlzUmVsaWFibGVTb3VyY2UiLCJzb21lIiwiaXNSZWNlbnQiLCJoaWdobHlDcmVkaWJsZSIsImlzSGlnaGx5Q3JlZGlibGUiLCJoYW5kbGVyIiwicmVxIiwicmVzIiwic2V0SGVhZGVyIiwicGFnZSIsImxpbWl0IiwiY2FjaGVTdGF0dXMiLCJwYWdlTnVtYmVyIiwicGFyc2VJbnQiLCJsaW1pdE51bWJlciIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsInBhZ2luYXRlZEFydGljbGVzIiwidG90YWwiLCJoYXNNb3JlIiwidHlwZSIsInVwZGF0ZWRBdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./pages/api/english-news.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fenglish-news&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fenglish-news.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();