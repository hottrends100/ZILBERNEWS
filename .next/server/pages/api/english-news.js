"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/english-news";
exports.ids = ["pages/api/english-news"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "openai":
/*!*************************!*\
  !*** external "openai" ***!
  \*************************/
/***/ ((module) => {

module.exports = import("openai");;

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fenglish-news&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fenglish-news.js&middlewareConfigBase64=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fenglish-news&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fenglish-news.js&middlewareConfigBase64=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_english_news_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/english-news.js */ \"(api)/./pages/api/english-news.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_english_news_js__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_english_news_js__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_english_news_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_english_news_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/english-news\",\n        pathname: \"/api/english-news\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_english_news_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmVuZ2xpc2gtbmV3cyZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTJGYXBpJTJGZW5nbGlzaC1uZXdzLmpzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQ3dEO0FBQ3hEO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyx1REFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsdURBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVELHFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3VwZXItbmV3cy8/ZGMwZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXMvYXBpL2VuZ2xpc2gtbmV3cy5qc1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2VuZ2xpc2gtbmV3c1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2VuZ2xpc2gtbmV3c1wiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fenglish-news&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fenglish-news.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/english-news.js":
/*!***********************************!*\
  !*** ./pages/api/english-news.js ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai */ \"openai\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([openai__WEBPACK_IMPORTED_MODULE_2__]);\nopenai__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// API configurations\nconst NEWSAPI_KEY = process.env.NEWSAPI_KEY;\nconst NEWSAPI_BASE_URL = \"https://newsapi.org/v2\";\nconst GNEWS_API_KEY = process.env.GNEWS_API_KEY;\nconst GNEWS_BASE_URL = \"https://gnews.io/api/v4\";\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\n// Cache configuration\nconst CACHE_DURATION = 60 * 60 * 1000; // 60 minutes (1 hour) in milliseconds\nconst CACHE_FILE = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"news-cache.json\");\n// Background generation state\nlet backgroundInterval = null;\nlet isGenerating = false;\n// Check if cache exists (we'll always serve from cache if it exists)\nfunction cacheExists() {\n    try {\n        return fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(CACHE_FILE);\n    } catch (error) {\n        console.error(\"❌ Error checking cache:\", error);\n        return false;\n    }\n}\n// Check if cache needs refresh (for background generation)\nfunction cacheNeedsRefresh() {\n    try {\n        if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(CACHE_FILE)) {\n            return true;\n        }\n        const cacheData = JSON.parse(fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(CACHE_FILE, \"utf8\"));\n        const now = Date.now();\n        const cacheAge = now - cacheData.timestamp;\n        return cacheAge >= CACHE_DURATION;\n    } catch (error) {\n        console.error(\"❌ Error reading cache for refresh check:\", error);\n        return true;\n    }\n}\n// Load cached news with self-recovery\nfunction loadCachedNews() {\n    try {\n        const cacheData = JSON.parse(fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(CACHE_FILE, \"utf8\"));\n        // Validate cache structure\n        if (!cacheData.articles || !Array.isArray(cacheData.articles) || cacheData.articles.length === 0) {\n            throw new Error(\"Invalid cache structure or empty articles\");\n        }\n        console.log(`✅ Loaded ${cacheData.articles.length} cached articles`);\n        return cacheData.articles;\n    } catch (error) {\n        console.error(\"❌ Error loading cached news:\", error);\n        // Self-recovery: delete corrupt cache file\n        try {\n            if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(CACHE_FILE)) {\n                fs__WEBPACK_IMPORTED_MODULE_0___default().unlinkSync(CACHE_FILE);\n                console.log(\"\\uD83D\\uDDD1️ Deleted corrupt cache file for self-recovery\");\n            }\n        } catch (deleteError) {\n            console.error(\"❌ Failed to delete corrupt cache:\", deleteError);\n        }\n        return null;\n    }\n}\n// Save news to cache\nfunction saveToCache(articles) {\n    try {\n        const cacheData = {\n            articles: articles,\n            timestamp: Date.now(),\n            generatedAt: new Date().toISOString()\n        };\n        fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(CACHE_FILE, JSON.stringify(cacheData, null, 2));\n        console.log(`💾 Saved ${articles.length} articles to cache`);\n    } catch (error) {\n        console.error(\"❌ Error saving to cache:\", error);\n    }\n}\n// Background news generation\nasync function generateNewsInBackground() {\n    if (isGenerating) {\n        console.log(\"\\uD83D\\uDD04 News generation already in progress, skipping...\");\n        return;\n    }\n    if (!cacheNeedsRefresh()) {\n        console.log(\"\\uD83D\\uDCC1 Cache still fresh, skipping background generation\");\n        return;\n    }\n    isGenerating = true;\n    console.log(\"\\uD83D\\uDD04 Background: Generating fresh news...\");\n    try {\n        const articles = await fetchRealNews();\n        saveToCache(articles);\n        console.log(\"✅ Background: News updated successfully\");\n    } catch (error) {\n        console.error(\"❌ Background generation failed:\", error);\n    } finally{\n        isGenerating = false;\n    }\n}\n// Start background news generation\nfunction startBackgroundGeneration() {\n    if (backgroundInterval) {\n        return; // Already running\n    }\n    console.log(\"\\uD83D\\uDE80 Starting background news generation (every hour)\");\n    // Generate immediately if cache needs refresh\n    if (cacheNeedsRefresh()) {\n        generateNewsInBackground();\n    }\n    // Set interval for ongoing generation\n    backgroundInterval = setInterval(generateNewsInBackground, CACHE_DURATION);\n}\n// Fetch real news using GNews API\nasync function fetchGNewsArticles() {\n    try {\n        console.log(\"\\uD83D\\uDE80 Fetching news from GNews API...\");\n        if (!GNEWS_API_KEY) {\n            throw new Error(\"GNews API key not found\");\n        }\n        // Search queries focused on Ukraine-Russia conflict and political news\n        const queries = [\n            \"Ukraine Russia conflict\",\n            \"Trump foreign policy\",\n            \"peace negotiations Ukraine\",\n            \"humanitarian crisis Ukraine\",\n            \"NATO Ukraine military aid\",\n            \"Zelensky Putin\"\n        ];\n        const allArticles = [];\n        // Fetch news for each query\n        for(let i = 0; i < queries.length; i++){\n            const query = queries[i];\n            const url = `${GNEWS_BASE_URL}/search?q=${encodeURIComponent(query)}&lang=en&country=us&max=10&sortby=publishedAt&apikey=${GNEWS_API_KEY}`;\n            try {\n                const response = await fetch(url);\n                if (!response.ok) {\n                    console.warn(`GNews query ${i + 1} failed with status ${response.status}`);\n                    continue;\n                }\n                const data = await response.json();\n                if (data.articles && data.articles.length > 0) {\n                    // Filter valid articles\n                    const validArticles = data.articles.filter((article)=>article.title && article.description && article.title !== \"[Removed]\" && article.description !== \"[Removed]\");\n                    allArticles.push(...validArticles);\n                }\n                // Rate limiting delay\n                if (i < queries.length - 1) {\n                    await new Promise((resolve)=>setTimeout(resolve, 200));\n                }\n            } catch (fetchError) {\n                console.warn(`GNews query ${i + 1} failed:`, fetchError.message);\n                continue;\n            }\n        }\n        console.log(`📰 GNews: Found ${allArticles.length} total articles`);\n        return allArticles;\n    } catch (error) {\n        console.error(\"❌ GNews fetch error:\", error);\n        return [];\n    }\n}\n// Fetch real news using NewsAPI (fallback)\nasync function fetchNewsAPIArticles() {\n    try {\n        console.log(\"\\uD83D\\uDE80 Fetching news from NewsAPI...\");\n        if (!NEWSAPI_KEY) {\n            console.warn(\"⚠️ NewsAPI key not found, skipping NewsAPI\");\n            return [];\n        }\n        // Focus on Ukraine-Russia conflict and political news from reliable sources\n        // Enhanced query targeting for more interesting and relevant content\n        const queries = [\n            \"Ukraine Russia conflict latest developments\",\n            \"Trump foreign policy Ukraine Russia\",\n            \"peace negotiations Ukraine ceasefire\",\n            \"humanitarian crisis Ukraine refugees\",\n            \"diplomatic efforts Russia sanctions\",\n            \"NATO Ukraine military aid\",\n            \"Zelensky Putin negotiations\"\n        ];\n        // Verified fact-based sources with high credibility ratings\n        const sources = \"reuters,associated-press,bbc-news,al-jazeera-english,cnn,abc-news,npr,bloomberg\";\n        const allArticles = [];\n        // Fetch news for each query to get comprehensive coverage\n        // Enhanced error handling and rate limiting consideration\n        for(let i = 0; i < queries.length; i++){\n            const query = queries[i];\n            const url = `${NEWSAPI_BASE_URL}/everything?q=${encodeURIComponent(query)}&sources=${sources}&language=en&sortBy=publishedAt&pageSize=15&apiKey=${NEWSAPI_KEY}`;\n            try {\n                const response = await fetch(url);\n                if (!response.ok) {\n                    console.warn(`NewsAPI query ${i + 1} failed with status ${response.status}`);\n                    continue; // Continue with other queries if one fails\n                }\n                const data = await response.json();\n                if (data.articles && data.articles.length > 0) {\n                    // Filter out articles without meaningful content\n                    const validArticles = data.articles.filter((article)=>article.title && article.description && article.title !== \"[Removed]\" && article.description !== \"[Removed]\");\n                    allArticles.push(...validArticles);\n                }\n                // Small delay to respect rate limits\n                if (i < queries.length - 1) {\n                    await new Promise((resolve)=>setTimeout(resolve, 100));\n                }\n            } catch (fetchError) {\n                console.warn(`NewsAPI query ${i + 1} failed:`, fetchError.message);\n                continue;\n            }\n        }\n        console.log(`📰 NewsAPI: Found ${allArticles.length} total articles`);\n        return allArticles;\n    } catch (error) {\n        console.error(\"❌ NewsAPI fetch error:\", error);\n        return [];\n    }\n}\n// Combined news fetching function\nasync function fetchRealNews() {\n    try {\n        console.log(\"\\uD83D\\uDE80 Fetching real factual news from multiple sources...\");\n        // Fetch from both APIs in parallel for better performance\n        const [gNewsArticles, newsAPIArticles] = await Promise.all([\n            fetchGNewsArticles(),\n            fetchNewsAPIArticles()\n        ]);\n        // Combine articles from both sources\n        const allArticles = [\n            ...gNewsArticles,\n            ...newsAPIArticles\n        ];\n        if (allArticles.length === 0) {\n            throw new Error(\"No articles found from any news sources\");\n        }\n        // Normalize article format for consistent processing\n        const normalizedArticles = allArticles.map((article)=>{\n            // Handle different API response formats\n            if (article.source && typeof article.source === \"object\") {\n                // NewsAPI format\n                return {\n                    title: article.title,\n                    description: article.description,\n                    content: article.content,\n                    url: article.url,\n                    urlToImage: article.urlToImage || article.image,\n                    publishedAt: article.publishedAt,\n                    source: {\n                        name: article.source.name\n                    }\n                };\n            } else {\n                // GNews format\n                return {\n                    title: article.title,\n                    description: article.description,\n                    content: article.content || article.description,\n                    url: article.url,\n                    urlToImage: article.image,\n                    publishedAt: article.publishedAt,\n                    source: {\n                        name: article.source?.name || article.source?.url || \"Unknown\"\n                    }\n                };\n            }\n        });\n        // Remove duplicates and sort by publication date\n        const uniqueArticles = normalizedArticles.filter((article, index, self)=>index === self.findIndex((a)=>a.title === article.title)).sort((a, b)=>new Date(b.publishedAt) - new Date(a.publishedAt));\n        // Transform to our format and take top 30\n        const processedArticles = uniqueArticles.slice(0, 30).map((article, index)=>{\n            const category = categorizeRealNews(article);\n            const importance = getImportanceLevel(article, index);\n            return {\n                id: Date.now() + index,\n                rank: index + 1,\n                title: article.title,\n                summary: article.description || \"No description available\",\n                fullContent: article.content || article.description || \"Full content not available\",\n                importance: importance,\n                source: article.source.name,\n                category: category,\n                publishedAt: article.publishedAt,\n                url: article.url,\n                urlToImage: article.urlToImage\n            };\n        });\n        console.log(`📊 Combined ${gNewsArticles.length} GNews + ${newsAPIArticles.length} NewsAPI = ${processedArticles.length} final articles`);\n        // Translate all articles to Russian\n        console.log(\"\\uD83D\\uDD04 Translating articles to Russian...\");\n        const translatedArticles = await translateArticlesToRussian(processedArticles);\n        console.log(`✅ Processed and translated ${translatedArticles.length} real news articles from verified sources`);\n        return translatedArticles;\n    } catch (error) {\n        console.error(\"❌ Error fetching real news:\", error);\n        return getFallbackNews();\n    }\n}\n// Categorize real news articles\nfunction categorizeRealNews(article) {\n    const title = article.title.toLowerCase();\n    const description = (article.description || \"\").toLowerCase();\n    const content = `${title} ${description}`;\n    // Ukraine-Russia conflict keywords\n    if (content.includes(\"ukraine\") || content.includes(\"russia\") || content.includes(\"putin\") || content.includes(\"kyiv\") || content.includes(\"moscow\") || content.includes(\"war\") || content.includes(\"conflict\") || content.includes(\"sanctions\") || content.includes(\"zelensky\")) {\n        return \"Украина-Россия\";\n    }\n    // Trump politics keywords\n    if (content.includes(\"trump\") || content.includes(\"donald\") || content.includes(\"election\") || content.includes(\"campaign\") || content.includes(\"republican\") || content.includes(\"foreign policy\")) {\n        return \"Политика Трампа\";\n    }\n    // Peace and humanitarian keywords\n    if (content.includes(\"peace\") || content.includes(\"ceasefire\") || content.includes(\"humanitarian\") || content.includes(\"refugee\") || content.includes(\"civilian\") || content.includes(\"aid\") || content.includes(\"diplomatic\") || content.includes(\"negotiations\")) {\n        return \"Мирные усилия\";\n    }\n    // Anti-war movement keywords\n    if (content.includes(\"protest\") || content.includes(\"anti-war\") || content.includes(\"activism\") || content.includes(\"movement\") || content.includes(\"demonstration\") || content.includes(\"peace march\")) {\n        return \"Антивоенное движение\";\n    }\n    // Humanitarian focus\n    if (content.includes(\"humanitarian\") || content.includes(\"victims\") || content.includes(\"casualties\") || content.includes(\"displaced\") || content.includes(\"crisis\") || content.includes(\"suffering\")) {\n        return \"Гуманитарные\";\n    }\n    return \"Главные\";\n}\n// Translate articles to Russian using OpenAI\nasync function translateArticlesToRussian(articles) {\n    try {\n        if (!process.env.OPENAI_API_KEY) {\n            console.warn(\"⚠️ OpenAI API key not found, returning articles without translation\");\n            return articles;\n        }\n        // Process articles in batches to avoid API limits\n        const batchSize = 3;\n        const translatedArticles = [];\n        for(let i = 0; i < articles.length; i += batchSize){\n            const batch = articles.slice(i, i + batchSize);\n            const batchPrompts = batch.map((article)=>({\n                    title: article.title,\n                    summary: article.summary,\n                    content: article.fullContent\n                }));\n            const prompt = `Переведите следующие новостные статьи на русский язык, сохраняя журналистский стиль и фактуальность. Особое внимание уделяйте гуманитарным аспектам и антивоенной направленности.\n\nСтатьи для перевода:\n${JSON.stringify(batchPrompts, null, 2)}\n\nВерните перевод в том же JSON формате с полями title, summary, content. Сохраняйте профессиональный журналистский стиль.`;\n            try {\n                const response = await openai.chat.completions.create({\n                    model: \"gpt-4o-mini\",\n                    messages: [\n                        {\n                            role: \"user\",\n                            content: prompt\n                        }\n                    ],\n                    response_format: {\n                        type: \"json_object\"\n                    },\n                    temperature: 0.3\n                });\n                const translatedBatch = JSON.parse(response.choices[0].message.content);\n                // Merge translated content back with original article data\n                batch.forEach((article, index)=>{\n                    // Handle different response formats from OpenAI\n                    let translatedArray = [];\n                    if (Array.isArray(translatedBatch)) {\n                        translatedArray = translatedBatch;\n                    } else if (translatedBatch.articles) {\n                        translatedArray = translatedBatch.articles;\n                    } else {\n                        translatedArray = Object.values(translatedBatch);\n                    }\n                    const translated = translatedArray[index];\n                    if (translated && translated.title) {\n                        translatedArticles.push({\n                            ...article,\n                            title: translated.title,\n                            summary: translated.summary,\n                            fullContent: translated.content\n                        });\n                    } else {\n                        translatedArticles.push(article); // Fallback to original if translation failed\n                    }\n                });\n                // Small delay between batches to respect rate limits\n                if (i + batchSize < articles.length) {\n                    await new Promise((resolve)=>setTimeout(resolve, 200));\n                }\n            } catch (batchError) {\n                console.error(`❌ Translation batch ${Math.floor(i / batchSize) + 1} failed:`, batchError.message);\n                // Add original articles if translation fails\n                translatedArticles.push(...batch);\n            }\n        }\n        console.log(`✅ Successfully translated ${translatedArticles.length} articles to Russian`);\n        return translatedArticles;\n    } catch (error) {\n        console.error(\"❌ Translation error:\", error);\n        return articles; // Return original articles if translation completely fails\n    }\n}\n// Determine importance level based on source credibility and recency\nfunction getImportanceLevel(article, index) {\n    const reliableSources = [\n        \"reuters\",\n        \"associated press\",\n        \"bbc\",\n        \"guardian\",\n        \"al jazeera\",\n        \"npr\",\n        \"cnn\",\n        \"abc news\",\n        \"bloomberg\",\n        \"financial times\"\n    ];\n    const sourceName = article.source.name.toLowerCase();\n    const isReliableSource = reliableSources.some((source)=>sourceName.includes(source));\n    const isRecent = new Date() - new Date(article.publishedAt) < 6 * 60 * 60 * 1000; // 6 hours\n    // Enhanced fact-checking: prefer highly credible sources\n    const highlyCredible = [\n        \"reuters\",\n        \"associated press\",\n        \"bbc\"\n    ];\n    const isHighlyCredible = highlyCredible.some((source)=>sourceName.includes(source));\n    if (index < 3 && isHighlyCredible && isRecent) return \"Breaking\";\n    if (index < 5 && isReliableSource && isRecent) return \"Critical\";\n    if (index < 10 && isReliableSource) return \"Urgent\";\n    return \"Developing\";\n}\n// Fallback news data in case of API failure\nfunction getFallbackNews() {\n    return [\n        {\n            id: Date.now(),\n            rank: 1,\n            title: \"СРОЧНО: Проблемы с подключением к новостным источникам\",\n            summary: \"В настоящее время возникли технические трудности с получением свежих новостей из надежных источников.\",\n            fullContent: \"Мы работаем над восстановлением подключения к проверенным новостным агентствам, чтобы предоставить вам самые актуальные и достоверные новости. Пожалуйста, обновите страницу через несколько минут.\",\n            importance: \"Breaking\",\n            source: \"News System\",\n            category: \"Главные\",\n            publishedAt: new Date().toISOString()\n        }\n    ];\n}\nasync function handler(req, res) {\n    // Set CORS headers\n    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    res.setHeader(\"Access-Control-Allow-Methods\", \"GET\");\n    res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type\");\n    try {\n        const { page = 1, limit = 30 } = req.query;\n        let allArticles;\n        let cacheStatus;\n        // Start background generation on first request\n        startBackgroundGeneration();\n        // Always try to serve from cache first\n        if (cacheExists()) {\n            allArticles = loadCachedNews();\n            if (allArticles && allArticles.length > 0) {\n                cacheStatus = \"instant\";\n                console.log(\"⚡ Serving cached news instantly\");\n            } else {\n                // Cache exists but is corrupted/invalid - generate fresh\n                console.log(\"\\uD83D\\uDD04 Cache corrupted, fetching fresh real news...\");\n                allArticles = await fetchRealNews();\n                saveToCache(allArticles);\n                cacheStatus = \"recovered\";\n            }\n        } else {\n            // Only generate synchronously if no cache exists at all (first time)\n            console.log(\"\\uD83D\\uDD04 No cache found, fetching initial real news...\");\n            allArticles = await fetchRealNews();\n            saveToCache(allArticles);\n            cacheStatus = \"initial\";\n        }\n        // Handle pagination\n        const pageNumber = parseInt(page);\n        const limitNumber = parseInt(limit);\n        const startIndex = (pageNumber - 1) * limitNumber;\n        const endIndex = startIndex + limitNumber;\n        const paginatedArticles = allArticles.slice(startIndex, endIndex);\n        res.status(200).json({\n            articles: paginatedArticles,\n            total: allArticles.length,\n            page: pageNumber,\n            hasMore: endIndex < allArticles.length,\n            type: \"real_news_with_cache\",\n            cacheStatus: cacheStatus,\n            updatedAt: new Date().toISOString()\n        });\n    } catch (error) {\n        console.error(\"API Error:\", error);\n        res.status(500).json({\n            error: \"Failed to load news\",\n            message: error.message\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/english-news.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fenglish-news&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fenglish-news.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();