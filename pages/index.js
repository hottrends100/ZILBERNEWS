// pages/index.js
import { useEffect, useState } from "react";
import InfiniteScroll from "react-infinite-scroll-component";
import NewsCard from "../components/NewsCard";

export default function Home() {
  const [articles, setArticles] = useState([]);
  const [filteredArticles, setFilteredArticles] = useState([]);
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  const [activeCategory, setActiveCategory] = useState("Top");

  const categories = ["–ì–ª–∞–≤–Ω—ã–µ", "–£–∫—Ä–∞–∏–Ω–∞-–†–æ—Å—Å–∏—è", "–ü–æ–ª–∏—Ç–∏–∫–∞ –¢—Ä–∞–º–ø–∞", "–ú–∏—Ä–Ω—ã–µ —É—Å–∏–ª–∏—è", "–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ", "–ê–Ω—Ç–∏–≤–æ–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ"];

  // Category classification for focused Ukraine-Russia and Trump coverage
  const categorizeArticle = (article) => {
    // Use the category from the API if already set
    if (article.category && categories.includes(article.category)) {
      return article.category;
    }

    const title = article.title.toLowerCase();
    const summary = article.summary.toLowerCase();
    const content = `${title} ${summary}`;

    // Ukraine-Russia conflict keywords (Russian and English)
    if (content.includes('—É–∫—Ä–∞–∏–Ω') || content.includes('—Ä–æ—Å—Å–∏') || content.includes('–ø—É—Ç–∏–Ω') || 
        content.includes('–∫–∏–µ–≤') || content.includes('–º–æ—Å–∫–≤') || content.includes('–≤–æ–π–Ω–∞') || 
        content.includes('–∫–æ–Ω—Ñ–ª–∏–∫—Ç') || content.includes('—Å–∞–Ω–∫—Ü–∏–∏') ||
        content.includes('ukraine') || content.includes('russia') || content.includes('putin') || 
        content.includes('kiev') || content.includes('moscow') || content.includes('war')) return "–£–∫—Ä–∞–∏–Ω–∞-–†–æ—Å—Å–∏—è";
    
    // Trump politics keywords (Russian and English)
    if (content.includes('—Ç—Ä–∞–º–ø') || content.includes('–¥–æ–Ω–∞–ª—å–¥') || content.includes('–≤—ã–±–æ—Ä—ã') || 
        content.includes('–∫–∞–º–ø–∞–Ω–∏—è') || content.includes('—Ä–µ—Å–ø—É–±–ª–∏–∫–∞–Ω—Å–∫') || content.includes('–≤–Ω–µ—à–Ω') ||
        content.includes('trump') || content.includes('donald') || content.includes('election') || 
        content.includes('campaign') || content.includes('republican')) return "–ü–æ–ª–∏—Ç–∏–∫–∞ –¢—Ä–∞–º–ø–∞";
    
    // Peace and humanitarian keywords (Russian and English)
    if (content.includes('–º–∏—Ä') || content.includes('–ø–µ—Ä–µ–º–∏—Ä–∏–µ') || content.includes('–≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω') || 
        content.includes('–±–µ–∂–µ–Ω—Ü') || content.includes('–ø–æ–º–æ—â—å') || content.includes('–≥—Ä–∞–∂–¥–∞–Ω—Å–∫') || 
        content.includes('–¥–∏–ø–ª–æ–º–∞—Ç') || content.includes('–ø–µ—Ä–µ–≥–æ–≤–æ—Ä') ||
        content.includes('peace') || content.includes('ceasefire') || content.includes('humanitarian') || 
        content.includes('refugee') || content.includes('civilian')) return "–ú–∏—Ä–Ω—ã–µ —É—Å–∏–ª–∏—è";
    
    // Anti-war movement keywords (Russian and English)
    if (content.includes('–ø—Ä–æ—Ç–µ—Å—Ç') || content.includes('–∞–Ω—Ç–∏–≤–æ–µ–Ω–Ω') || content.includes('–∞–∫—Ç–∏–≤–∏–∑–º') || 
        content.includes('–¥–≤–∏–∂–µ–Ω–∏–µ') || content.includes('–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü') || content.includes('–º–∞—Ä—à –º–∏—Ä–∞') ||
        content.includes('protest') || content.includes('anti-war') || content.includes('activism') || 
        content.includes('movement') || content.includes('demonstration')) return "–ê–Ω—Ç–∏–≤–æ–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ";
    
    return "–ì–ª–∞–≤–Ω—ã–µ";
  };

  const fetchNews = async () => {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...');
      const res = await fetch(`/api/english-news`);
      const data = await res.json();
      
      if (data.articles && data.articles.length > 0) {
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${data.articles.length} –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π`);
        const categorizedArticles = data.articles.map(article => ({
          ...article,
          category: categorizeArticle(article)
        }));
        setArticles(categorizedArticles);
        setHasMore(false); // Fresh news doesn't need pagination
      } else if (data.error) {
        console.error('News API error:', data.error);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
    }
  };

  // Filter articles based on selected category
  useEffect(() => {
    if (activeCategory === "Top") {
      setFilteredArticles(articles);
    } else {
      setFilteredArticles(articles.filter(article => article.category === activeCategory));
    }
  }, [articles, activeCategory]);

  useEffect(() => {
    fetchNews();
  }, []);

  return (
    <div className="max-w-3xl mx-auto">
      <div className="p-4 pb-2">
        <h1 className="text-3xl font-bold mb-4 text-center">üì∞ –ù–æ–≤–æ—Å—Ç–Ω–æ–π —Ü–µ–Ω—Ç—Ä</h1>
      </div>

      {/* Category Tabs - Sticky on mobile */}
      <div className="sticky top-0 z-10 bg-gray-50 dark:bg-gray-900 px-4 pb-4 mb-2">
        <div className="overflow-x-auto scrollbar-hide">
          <div className="flex space-x-3 min-w-max pb-2">
            {categories.map((category) => (
              <button
                key={category}
                onClick={() => setActiveCategory(category)}
                className={`px-4 py-2.5 rounded-full font-medium text-sm transition-all duration-200 whitespace-nowrap shadow-sm ${
                  activeCategory === category
                    ? "bg-blue-600 text-white shadow-lg transform scale-105"
                    : "bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-blue-50 dark:hover:bg-gray-700 border border-gray-200 dark:border-gray-600"
                }`}
              >
                {category}
              </button>
            ))}
          </div>
        </div>
      </div>

      <div className="px-4">

        <InfiniteScroll
          dataLength={filteredArticles.length}
          next={fetchNews}
          hasMore={hasMore}
          loader={<h4 className="text-center">Loading...</h4>}
          endMessage={
            <p style={{ textAlign: "center", marginTop: 20 }}>
              <b>All news loaded ‚úÖ</b>
            </p>
          }
        >
          {filteredArticles.map(a => <NewsCard key={a.id} article={a} />)}
        </InfiniteScroll>
      </div>
    </div>
  );
}
